"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const difference = require("lodash/difference");
const get = require("lodash/get");
exports.removeOutdatedItem = (data, outdated) => data.filter(item => {
    return !outdated.includes(item);
});
exports.diff = ({ currentOrder, data, }) => {
    const outdatedItem = difference(currentOrder, data);
    const newItem = difference(data, currentOrder);
    if (outdatedItem.length === 0 && newItem.length === 0) {
        return {
            modified: false,
            newOrder: currentOrder,
        };
    }
    const newOrder = exports.removeOutdatedItem(currentOrder, outdatedItem).concat(newItem);
    return {
        modified: true,
        newOrder,
    };
};
exports.reorder = ({ data, startIndex, endIndex }) => {
    const result = Array.from(data);
    const [removed] = result.splice(startIndex, 1);
    result.splice(endIndex, 0, removed);
    return result;
};
exports.normalize = (data, key) => data.reduce((result, item) => {
    const id = String(item[key]);
    result[id] = item;
    return result;
}, {});
exports.parseTemplate = ({ template, data }) => {
    const indicators = ['{{', '}}'];
    const parsed = [];
    let _template = template;
    let count = 0;
    const parse = () => {
        const indicator = indicators[count % 2];
        const openIndex = _template.indexOf(indicator);
        if (openIndex === -1) {
            parsed.push(_template);
            return;
        }
        const first = _template.substring(0, openIndex);
        const value = (count % 2 === 1)
            ? get(data, first, 'not found')
            : first;
        parsed.push(value);
        count++;
        const nextIndex = openIndex + indicator.length;
        _template = _template.substring(nextIndex);
        parse();
    };
    parse();
    return parsed.join('');
};
