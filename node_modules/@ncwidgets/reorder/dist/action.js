"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("./utils");
const action_types_1 = require("./action.types");
exports.handleDragEnd = (result, prevOrder, dispatch) => {
    if (!result.destination || result.destination.index === result.source.index)
        return;
    const newOrder = utils_1.reorder(prevOrder, result.source.index, result.destination.index);
    dispatch({ type: action_types_1.ReorderAction.ORDER_DATA, payload: { order: newOrder, orderModified: true } });
};
exports.setOrder = (data, value, dispatch) => {
    if (data) {
        const keys = Object.keys(data);
        if (!value || !value.toJS) {
            dispatch({
                type: action_types_1.ReorderAction.ORDER_DATA,
                payload: { order: keys, orderModified: false }
            });
        }
        else {
            if (keys.length === 0)
                return;
            const currentOrder = value.toJS();
            const { newOrder, modified } = utils_1.diff({
                currentOrder,
                data: keys
            });
            dispatch({
                type: action_types_1.ReorderAction.ORDER_DATA,
                payload: { order: newOrder, orderModified: modified }
            });
        }
    }
};
exports.queryData = (props, dispatch) => {
    const { query, forID, field } = props;
    const collection = field.get('collection');
    const fieldId = field.get('id_field');
    query(forID, collection, [fieldId], '')
        .then(result => {
        const sourceData = result.payload.response.hits.map(payload => payload.data);
        // @ts-ignore
        const fetchedData = utils_1.normalize(sourceData, fieldId);
        dispatch({
            type: action_types_1.ReorderAction.QUERY_DATA,
            payload: { data: fetchedData }
        });
    });
};
