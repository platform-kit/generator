"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_beautiful_dnd_1 = require("react-beautiful-dnd");
const styled_1 = __importDefault(require("@emotion/styled"));
const StyledDraggable = styled_1.default.div `
  padding: 1rem;
  opacity: ${({ isDragging }) => isDragging ? 0.6 : 1};
  box-shadow: ${({ isDragging }) => isDragging ? '0 4px 16px 0 rgba(0,0,0,0.2)' : '0 2px 6px 0 rgba(0,0,0,0.2)'};
  background: #fff;
  border-radius: 3px;
  margin-bottom: 0.5rem;
`;
exports.ControlDraggableItem = ({ identifier, index, children }) => React.createElement(react_beautiful_dnd_1.Draggable, { key: identifier, draggableId: identifier, index: index }, (provided, snapshot) => (React.createElement(StyledDraggable, Object.assign({ isDragging: snapshot.isDragging, ref: provided.innerRef }, provided.draggableProps, provided.dragHandleProps, { style: provided.draggableProps.style }), children)));
const StyledDroppable = styled_1.default.div `
  position: relative;
  padding: 1rem;
  background-color: ${({ isDraggingOver }) => isDraggingOver ? 'lightblue' : '#dfdfe3'};
  border-radius: 3px;
  overflow-y: scroll;
  max-height: ${({ maxHeight }) => maxHeight};
  border: 2px solid #dfdfe3;
`;
exports.ControlList = ({ onDragEnd, children, maxHeight }) => React.createElement(react_beautiful_dnd_1.DragDropContext, { onDragEnd: (result) => onDragEnd(result) },
    React.createElement(react_beautiful_dnd_1.Droppable, { droppableId: "droppable" }, (provided, snapshot) => (React.createElement(StyledDroppable, Object.assign({ ref: provided.innerRef, maxHeight: maxHeight, isDraggingOver: snapshot.isDraggingOver }, provided.droppableProps),
        children,
        provided.placeholder))));
