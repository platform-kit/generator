import * as React from 'react';
import { List, Map } from 'immutable';
import { DropResult } from 'react-beautiful-dnd';
import { WidgetProps } from '@ncwidgets/common-typings';
import { Modified } from './control';
export interface RenderControlProps {
    value: any;
    field: Map<any, any>;
}
export interface RenderPreviewProps {
    value: List<any>;
    field: Map<any, any>;
}
export interface ControlProps extends WidgetProps {
    value: List<string>;
}
export interface ControlState {
    data: Record<string, any>;
    fetched: boolean;
    newOrder: string[];
    modified: Modified;
}
export interface CreateWidgetOptions {
    renderControl?: (props: RenderControlProps) => React.ReactNode;
    renderPreview?: (props: RenderPreviewProps) => React.ReactNode;
    name?: string;
}
export declare const createWidget: ({ renderControl, renderPreview, name }: CreateWidgetOptions) => {
    name: string;
    controlComponent: {
        new (props: Readonly<ControlProps>): {
            state: ControlState;
            componentDidMount(): Promise<void>;
            handleDisplayChange: () => void;
            handleDragEnd: (result: DropResult) => void;
            render(): JSX.Element;
            context: any;
            setState<K extends "data" | "modified" | "fetched" | "newOrder">(state: ControlState | ((prevState: Readonly<ControlState>, props: Readonly<ControlProps>) => ControlState | Pick<ControlState, K> | null) | Pick<ControlState, K> | null, callback?: (() => void) | undefined): void;
            forceUpdate(callBack?: (() => void) | undefined): void;
            readonly props: Readonly<ControlProps> & Readonly<{
                children?: React.ReactNode;
            }>;
            refs: {
                [key: string]: React.ReactInstance;
            };
        };
        new (props: ControlProps, context?: any): {
            state: ControlState;
            componentDidMount(): Promise<void>;
            handleDisplayChange: () => void;
            handleDragEnd: (result: DropResult) => void;
            render(): JSX.Element;
            context: any;
            setState<K extends "data" | "modified" | "fetched" | "newOrder">(state: ControlState | ((prevState: Readonly<ControlState>, props: Readonly<ControlProps>) => ControlState | Pick<ControlState, K> | null) | Pick<ControlState, K> | null, callback?: (() => void) | undefined): void;
            forceUpdate(callBack?: (() => void) | undefined): void;
            readonly props: Readonly<ControlProps> & Readonly<{
                children?: React.ReactNode;
            }>;
            refs: {
                [key: string]: React.ReactInstance;
            };
        };
        contextType?: React.Context<any> | undefined;
    };
    previewComponent: React.FunctionComponent<{}>;
};
