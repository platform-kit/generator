import React from 'react';
import { List, Map as ImmutableMap } from 'immutable';
import { DropResult } from 'react-beautiful-dnd';
import { WidgetProps } from '@ncwidgets/common-typings';
import { Modified } from './components/modal';
interface PreviewPortalProps {
    portalRef: React.RefObject<HTMLDivElement>;
    children: React.ReactNode;
}
export declare const PreviewPortal: ({ portalRef, children }: PreviewPortalProps) => React.ReactPortal | null;
export interface RenderControlProps {
    value: any;
    field: ImmutableMap<any, any>;
}
export declare type RenderControl = (props: RenderControlProps) => React.ReactNode;
export declare const renderDefaultControl: ({ value, field }: {
    value: any;
    field: any;
}) => string;
export interface ControlProps extends WidgetProps {
    value: List<string>;
}
export interface ControlState {
    data: Record<string, any>;
    fetched: boolean;
    newOrder: string[];
    modified: Modified;
}
export declare const createControl: ({ renderControl, renderPreview, previewRef }: {
    renderControl: any;
    renderPreview: any;
    previewRef: any;
}) => {
    new (props: Readonly<ControlProps>): {
        state: ControlState;
        componentDidMount(): Promise<void>;
        handleDisplayChange: () => void;
        handleDragEnd: (result: DropResult) => void;
        render(): JSX.Element;
        context: any;
        setState<K extends "data" | "modified" | "fetched" | "newOrder">(state: ControlState | ((prevState: Readonly<ControlState>, props: Readonly<ControlProps>) => ControlState | Pick<ControlState, K> | null) | Pick<ControlState, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callBack?: (() => void) | undefined): void;
        readonly props: Readonly<ControlProps> & Readonly<{
            children?: React.ReactNode;
        }>;
        refs: {
            [key: string]: React.ReactInstance;
        };
    };
    new (props: ControlProps, context?: any): {
        state: ControlState;
        componentDidMount(): Promise<void>;
        handleDisplayChange: () => void;
        handleDragEnd: (result: DropResult) => void;
        render(): JSX.Element;
        context: any;
        setState<K extends "data" | "modified" | "fetched" | "newOrder">(state: ControlState | ((prevState: Readonly<ControlState>, props: Readonly<ControlProps>) => ControlState | Pick<ControlState, K> | null) | Pick<ControlState, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callBack?: (() => void) | undefined): void;
        readonly props: Readonly<ControlProps> & Readonly<{
            children?: React.ReactNode;
        }>;
        refs: {
            [key: string]: React.ReactInstance;
        };
    };
    contextType?: React.Context<any> | undefined;
};
export {};
