export declare const removeOutdatedItem: <T>(data: T[], outdated: T[]) => T[];
interface DiffArgs<T> {
    currentOrder: T[];
    data: T[];
}
interface DiffResult<T> {
    modified: boolean;
    newOrder: T[];
}
export declare const diff: <T>({ currentOrder, data, }: DiffArgs<T>) => DiffResult<T>;
export declare const reorder: ({ data, startIndex, endIndex }: {
    data: any;
    startIndex: any;
    endIndex: any;
}) => unknown[];
export declare const normalize: <T, K extends keyof T>(data: T[], key: K) => Record<string, T>;
interface TemplateParserArgs {
    template: string;
    data: any;
}
export declare const parseTemplate: ({ template, data }: TemplateParserArgs) => string;
export {};
