import * as React from 'react';
import { RenderControl } from './control';
import { RenderPreview } from './preview';
export interface CreateWidgetOptions {
    renderControl?: RenderControl;
    renderPreview?: RenderPreview;
}
declare const createWidget: ({ renderControl, renderPreview, }: CreateWidgetOptions) => {
    controlComponent: {
        new (props: Readonly<import("./control").ControlProps>): {
            state: import("./control").ControlState;
            componentDidMount(): Promise<void>;
            handleDisplayChange: () => void;
            handleDragEnd: (result: import("react-beautiful-dnd").DropResult) => void;
            render(): JSX.Element;
            context: any;
            setState<K extends "data" | "modified" | "fetched" | "newOrder">(state: import("./control").ControlState | ((prevState: Readonly<import("./control").ControlState>, props: Readonly<import("./control").ControlProps>) => import("./control").ControlState | Pick<import("./control").ControlState, K> | null) | Pick<import("./control").ControlState, K> | null, callback?: (() => void) | undefined): void;
            forceUpdate(callBack?: (() => void) | undefined): void;
            readonly props: Readonly<import("./control").ControlProps> & Readonly<{
                children?: React.ReactNode;
            }>;
            refs: {
                [key: string]: React.ReactInstance;
            };
        };
        new (props: import("./control").ControlProps, context?: any): {
            state: import("./control").ControlState;
            componentDidMount(): Promise<void>;
            handleDisplayChange: () => void;
            handleDragEnd: (result: import("react-beautiful-dnd").DropResult) => void;
            render(): JSX.Element;
            context: any;
            setState<K extends "data" | "modified" | "fetched" | "newOrder">(state: import("./control").ControlState | ((prevState: Readonly<import("./control").ControlState>, props: Readonly<import("./control").ControlProps>) => import("./control").ControlState | Pick<import("./control").ControlState, K> | null) | Pick<import("./control").ControlState, K> | null, callback?: (() => void) | undefined): void;
            forceUpdate(callBack?: (() => void) | undefined): void;
            readonly props: Readonly<import("./control").ControlProps> & Readonly<{
                children?: React.ReactNode;
            }>;
            refs: {
                [key: string]: React.ReactInstance;
            };
        };
        contextType?: React.Context<any> | undefined;
    };
    previewComponent: React.FunctionComponent<{}>;
};
declare const Widget: {
    controlComponent: {
        new (props: Readonly<import("./control").ControlProps>): {
            state: import("./control").ControlState;
            componentDidMount(): Promise<void>;
            handleDisplayChange: () => void;
            handleDragEnd: (result: import("react-beautiful-dnd").DropResult) => void;
            render(): JSX.Element;
            context: any;
            setState<K extends "data" | "modified" | "fetched" | "newOrder">(state: import("./control").ControlState | ((prevState: Readonly<import("./control").ControlState>, props: Readonly<import("./control").ControlProps>) => import("./control").ControlState | Pick<import("./control").ControlState, K> | null) | Pick<import("./control").ControlState, K> | null, callback?: (() => void) | undefined): void;
            forceUpdate(callBack?: (() => void) | undefined): void;
            readonly props: Readonly<import("./control").ControlProps> & Readonly<{
                children?: React.ReactNode;
            }>;
            refs: {
                [key: string]: React.ReactInstance;
            };
        };
        new (props: import("./control").ControlProps, context?: any): {
            state: import("./control").ControlState;
            componentDidMount(): Promise<void>;
            handleDisplayChange: () => void;
            handleDragEnd: (result: import("react-beautiful-dnd").DropResult) => void;
            render(): JSX.Element;
            context: any;
            setState<K extends "data" | "modified" | "fetched" | "newOrder">(state: import("./control").ControlState | ((prevState: Readonly<import("./control").ControlState>, props: Readonly<import("./control").ControlProps>) => import("./control").ControlState | Pick<import("./control").ControlState, K> | null) | Pick<import("./control").ControlState, K> | null, callback?: (() => void) | undefined): void;
            forceUpdate(callBack?: (() => void) | undefined): void;
            readonly props: Readonly<import("./control").ControlProps> & Readonly<{
                children?: React.ReactNode;
            }>;
            refs: {
                [key: string]: React.ReactInstance;
            };
        };
        contextType?: React.Context<any> | undefined;
    };
    previewComponent: React.FunctionComponent<{}>;
    name: string;
};
export { createWidget, Widget };
