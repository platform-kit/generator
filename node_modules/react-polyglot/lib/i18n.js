'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _nodePolyglot = require('node-polyglot');

var _nodePolyglot2 = _interopRequireDefault(_nodePolyglot);

var _i18nContext = require('./i18n-context');

var _i18nContext2 = _interopRequireDefault(_i18nContext);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Provider root component
var I18n = function (_React$Component) {
  _inherits(I18n, _React$Component);

  function I18n(props) {
    _classCallCheck(this, I18n);

    var _this = _possibleConstructorReturn(this, (I18n.__proto__ || Object.getPrototypeOf(I18n)).call(this, props));

    _this._polyglot = new _nodePolyglot2.default({
      locale: props.locale,
      phrases: props.messages,

      allowMissing: props.allowMissing,
      onMissingKey: props.onMissingKey,
      interpolation: props.interpolation,
      pluralRules: props.pluralRules
    });
    return _this;
  }

  _createClass(I18n, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {
      if (newProps.locale !== this.props.locale) {
        this._polyglot.locale(newProps.locale);
      }

      if (newProps.messages !== this.props.messages) {
        this._polyglot.replace(newProps.messages);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var children = this.props.children;


      return _react2.default.createElement(
        _i18nContext2.default.Provider,
        { value: this._polyglot.t.bind(this._polyglot) },
        _react2.default.Children.only(children)
      );
    }
  }]);

  return I18n;
}(_react2.default.Component);

exports.default = I18n;


I18n.propTypes = {
  locale: _propTypes2.default.string.isRequired,
  messages: _propTypes2.default.object.isRequired,

  allowMissing: _propTypes2.default.bool,
  onMissingKey: _propTypes2.default.func,
  interpolation: _propTypes2.default.shape({
    suffix: _propTypes2.default.string,
    prefix: _propTypes2.default.string
  }),
  pluralRules: _propTypes2.default.shape({
    pluralTypes: _propTypes2.default.object,
    pluralTypeToLanguages: _propTypes2.default.object
  }),

  children: _propTypes2.default.element.isRequired
};

I18n.defaultProps = {
  allowMissing: false,
  onMissingKey: undefined,
  interpolation: undefined,
  pluralRules: undefined
};