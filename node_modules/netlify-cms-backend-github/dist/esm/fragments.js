"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fileEntry = exports.treeEntry = exports.pullRequest = exports.branch = exports.object = exports.blobWithText = exports.repository = void 0;

var _graphqlTag = _interopRequireDefault(require("graphql-tag"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _templateObject7() {
  const data = _taggedTemplateLiteral(["\n  fragment FileEntryParts on TreeEntry {\n    name\n    sha: oid\n    type\n    blob: object {\n      ... on Blob {\n        size: byteSize\n      }\n    }\n  }\n"]);

  _templateObject7 = function () {
    return data;
  };

  return data;
}

function _templateObject6() {
  const data = _taggedTemplateLiteral(["\n  fragment TreeEntryParts on TreeEntry {\n    path: name\n    sha: oid\n    type\n    mode\n  }\n"]);

  _templateObject6 = function () {
    return data;
  };

  return data;
}

function _templateObject5() {
  const data = _taggedTemplateLiteral(["\n  fragment PullRequestParts on PullRequest {\n    id\n    baseRefName\n    baseRefOid\n    body\n    headRefName\n    headRefOid\n    number\n    state\n    title\n    merged_at: mergedAt\n    repository {\n      ...RepositoryParts\n    }\n    labels(last: 100) {\n      nodes {\n        name\n      }\n    }\n  }\n  ", "\n"]);

  _templateObject5 = function () {
    return data;
  };

  return data;
}

function _templateObject4() {
  const data = _taggedTemplateLiteral(["\n  fragment BranchParts on Ref {\n    commit: target {\n      ...ObjectParts\n    }\n    id\n    name\n    prefix\n    repository {\n      ...RepositoryParts\n    }\n  }\n  ", "\n  ", "\n"]);

  _templateObject4 = function () {
    return data;
  };

  return data;
}

function _templateObject3() {
  const data = _taggedTemplateLiteral(["\n  fragment ObjectParts on GitObject {\n    id\n    sha: oid\n  }\n"]);

  _templateObject3 = function () {
    return data;
  };

  return data;
}

function _templateObject2() {
  const data = _taggedTemplateLiteral(["\n  fragment BlobWithTextParts on Blob {\n    id\n    text\n    is_binary: isBinary\n  }\n"]);

  _templateObject2 = function () {
    return data;
  };

  return data;
}

function _templateObject() {
  const data = _taggedTemplateLiteral(["\n  fragment RepositoryParts on Repository {\n    id\n    isFork\n  }\n"]);

  _templateObject = function () {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const repository = (0, _graphqlTag.default)(_templateObject());
exports.repository = repository;
const blobWithText = (0, _graphqlTag.default)(_templateObject2());
exports.blobWithText = blobWithText;
const object = (0, _graphqlTag.default)(_templateObject3());
exports.object = object;
const branch = (0, _graphqlTag.default)(_templateObject4(), object, repository);
exports.branch = branch;
const pullRequest = (0, _graphqlTag.default)(_templateObject5(), repository);
exports.pullRequest = pullRequest;
const treeEntry = (0, _graphqlTag.default)(_templateObject6());
exports.treeEntry = treeEntry;
const fileEntry = (0, _graphqlTag.default)(_templateObject7());
exports.fileEntry = fileEntry;