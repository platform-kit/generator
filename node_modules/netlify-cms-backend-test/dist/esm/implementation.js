"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.getFolderEntries = void 0;

var _unset2 = _interopRequireDefault(require("lodash/unset"));

var _take2 = _interopRequireDefault(require("lodash/take"));

var _isError2 = _interopRequireDefault(require("lodash/isError"));

var _attempt2 = _interopRequireDefault(require("lodash/attempt"));

var _v = _interopRequireDefault(require("uuid/v4"));

var _netlifyCmsLibUtil = require("netlify-cms-lib-util");

var _AuthenticationPage = _interopRequireDefault(require("./AuthenticationPage"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

window.repoFiles = window.repoFiles || {};
window.repoFilesUnpublished = window.repoFilesUnpublished || [];

function getFile(path) {
  const segments = path.split('/');
  let obj = window.repoFiles;

  while (obj && segments.length) {
    obj = obj[segments.shift()];
  }

  return obj || {};
}

const pageSize = 10;

const getCursor = (folder, extension, entries, index, depth) => {
  const count = entries.length;
  const pageCount = Math.floor(count / pageSize);
  return _netlifyCmsLibUtil.Cursor.create({
    actions: [...(index < pageCount ? ['next', 'last'] : []), ...(index > 0 ? ['prev', 'first'] : [])],
    meta: {
      index,
      count,
      pageSize,
      pageCount
    },
    data: {
      folder,
      extension,
      index,
      pageCount,
      depth
    }
  });
};

const getFolderEntries = (tree, folder, extension, depth, files = [], path = folder) => {
  if (depth <= 0) {
    return files;
  }

  Object.keys(tree[folder] || {}).forEach(key => {
    if (key.endsWith(".".concat(extension))) {
      const file = tree[folder][key];
      files.unshift({
        file: {
          path: "".concat(path, "/").concat(key),
          id: null
        },
        data: file.content
      });
    } else {
      const subTree = tree[folder];
      return getFolderEntries(subTree, key, extension, depth - 1, files, "".concat(path, "/").concat(key));
    }
  });
  return files;
};

exports.getFolderEntries = getFolderEntries;

class TestBackend {
  constructor(_config, options = {}) {
    _defineProperty(this, "assets", void 0);

    _defineProperty(this, "options", void 0);

    this.assets = [];
    this.options = options;
  }

  authComponent() {
    return _AuthenticationPage.default;
  }

  restoreUser() {
    return this.authenticate();
  }

  authenticate() {
    return Promise.resolve();
  }

  logout() {
    return null;
  }

  getToken() {
    return Promise.resolve('');
  }

  traverseCursor(cursor, action) {
    const {
      folder,
      extension,
      index,
      pageCount,
      depth
    } = cursor.data.toObject();

    const newIndex = (() => {
      if (action === 'next') {
        return index + 1;
      }

      if (action === 'prev') {
        return index - 1;
      }

      if (action === 'first') {
        return 0;
      }

      if (action === 'last') {
        return pageCount;
      }

      return 0;
    })(); // TODO: stop assuming cursors are for collections


    const allEntries = getFolderEntries(window.repoFiles, folder, extension, depth);
    const entries = allEntries.slice(newIndex * pageSize, newIndex * pageSize + pageSize);
    const newCursor = getCursor(folder, extension, allEntries, newIndex, depth);
    return Promise.resolve({
      entries,
      cursor: newCursor
    });
  }

  entriesByFolder(folder, extension, depth) {
    const entries = folder ? getFolderEntries(window.repoFiles, folder, extension, depth) : [];
    const cursor = getCursor(folder, extension, entries, 0, depth);
    const ret = (0, _take2.default)(entries, pageSize); // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
    // @ts-ignore

    ret[_netlifyCmsLibUtil.CURSOR_COMPATIBILITY_SYMBOL] = cursor;
    return Promise.resolve(ret);
  }

  entriesByFiles(files) {
    return Promise.all(files.map(file => ({
      file,
      data: getFile(file.path).content
    })));
  }

  getEntry(path) {
    return Promise.resolve({
      file: {
        path,
        id: null
      },
      data: getFile(path).content
    });
  }

  unpublishedEntries() {
    return Promise.resolve(window.repoFilesUnpublished);
  }

  getMediaFiles(entry) {
    const mediaFiles = entry.mediaFiles.map(file => _objectSpread({}, file, {}, this.normalizeAsset(file), {
      file: file.file
    }));
    return mediaFiles;
  }

  unpublishedEntry(collection, slug) {
    const entry = window.repoFilesUnpublished.find(e => e.metaData.collection === collection && e.slug === slug);

    if (!entry) {
      return Promise.reject(new _netlifyCmsLibUtil.EditorialWorkflowError('content is not under editorial workflow', true));
    }

    entry.mediaFiles = this.getMediaFiles(entry);
    return Promise.resolve(entry);
  }

  deleteUnpublishedEntry(collection, slug) {
    const unpubStore = window.repoFilesUnpublished;
    const existingEntryIndex = unpubStore.findIndex(e => e.metaData.collection === collection && e.slug === slug);
    unpubStore.splice(existingEntryIndex, 1);
    return Promise.resolve();
  }

  async persistEntry({
    path,
    raw,
    slug
  }, assetProxies, options) {
    if (options.useWorkflow) {
      const unpubStore = window.repoFilesUnpublished;
      const existingEntryIndex = unpubStore.findIndex(e => e.file.path === path);

      if (existingEntryIndex >= 0) {
        const unpubEntry = _objectSpread({}, unpubStore[existingEntryIndex], {
          data: raw,
          title: options.parsedData && options.parsedData.title,
          description: options.parsedData && options.parsedData.description,
          mediaFiles: assetProxies.map(this.normalizeAsset)
        });

        unpubStore.splice(existingEntryIndex, 1, unpubEntry);
      } else {
        const unpubEntry = {
          data: raw,
          file: {
            path,
            id: null
          },
          metaData: {
            collection: options.collectionName,
            status: options.status || this.options.initialWorkflowStatus,
            title: options.parsedData && options.parsedData.title,
            description: options.parsedData && options.parsedData.description
          },
          slug,
          mediaFiles: assetProxies.map(this.normalizeAsset)
        };
        unpubStore.push(unpubEntry);
      }

      return Promise.resolve();
    }

    const newEntry = options.newEntry || false;
    const segments = path.split('/');
    const entry = newEntry ? {
      content: raw
    } : _objectSpread({}, getFile(path), {
      content: raw
    });
    let obj = window.repoFiles;

    while (segments.length > 1) {
      const segment = segments.shift();
      obj[segment] = obj[segment] || {};
      obj = obj[segment];
    }

    obj[segments.shift()] = entry;
    await Promise.all(assetProxies.map(file => this.persistMedia(file)));
    return Promise.resolve();
  }

  updateUnpublishedEntryStatus(collection, slug, newStatus) {
    const unpubStore = window.repoFilesUnpublished;
    const entryIndex = unpubStore.findIndex(e => e.metaData.collection === collection && e.slug === slug);
    unpubStore[entryIndex].metaData.status = newStatus;
    return Promise.resolve();
  }

  async publishUnpublishedEntry(collection, slug) {
    const unpubStore = window.repoFilesUnpublished;
    const unpubEntryIndex = unpubStore.findIndex(e => e.metaData.collection === collection && e.slug === slug);
    const unpubEntry = unpubStore[unpubEntryIndex];
    const entry = {
      raw: unpubEntry.data,
      slug: unpubEntry.slug,
      path: unpubEntry.file.path
    };
    unpubStore.splice(unpubEntryIndex, 1);
    await this.persistEntry(entry, unpubEntry.mediaFiles, {
      commitMessage: ''
    });
  }

  getMedia() {
    return Promise.resolve(this.assets);
  }

  async getMediaFile(path) {
    const asset = this.assets.find(asset => asset.path === path);
    const url = asset.url;
    const name = (0, _netlifyCmsLibUtil.basename)(path);
    const blob = await fetch(url).then(res => res.blob());
    const fileObj = new File([blob], name);
    return {
      id: url,
      displayURL: url,
      path,
      name,
      size: fileObj.size,
      file: fileObj,
      url
    };
  }

  normalizeAsset(assetProxy) {
    const fileObj = assetProxy.fileObj;
    const {
      name,
      size
    } = fileObj;
    const objectUrl = (0, _attempt2.default)(window.URL.createObjectURL, fileObj);
    const url = (0, _isError2.default)(objectUrl) ? '' : objectUrl;
    const normalizedAsset = {
      id: (0, _v.default)(),
      name,
      size,
      path: assetProxy.path,
      url,
      displayURL: url,
      fileObj
    };
    return normalizedAsset;
  }

  persistMedia(assetProxy) {
    const normalizedAsset = this.normalizeAsset(assetProxy);
    this.assets.push(normalizedAsset);
    return Promise.resolve(normalizedAsset);
  }

  deleteFile(path) {
    const assetIndex = this.assets.findIndex(asset => asset.path === path);

    if (assetIndex > -1) {
      this.assets.splice(assetIndex, 1);
    } else {
      (0, _unset2.default)(window.repoFiles, path.split('/'));
    }

    return Promise.resolve();
  }

  async getDeployPreview() {
    return null;
  }

}

exports.default = TestBackend;