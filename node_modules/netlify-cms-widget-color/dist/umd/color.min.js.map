{"version":3,"file":"color.min.js","sources":["../../src/index.js","../../src/Control.js"],"sourcesContent":["import Control from './Control';\n\nexport default {\n  Control,\n};\n","import React from 'react';\nimport createReactClass from 'create-react-class';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { SketchPicker } from '@pake/react-color';\n\nconst DEFAULT_FORMAT = 'hex';\nconst DEFAULT_COLOR = '#ffffff';\n\nexport default createReactClass({\n  propTypes: {\n    onChange: PropTypes.func.isRequired,\n    forID: PropTypes.string.isRequired,\n    value: PropTypes.node,\n    setActiveStyle: PropTypes.func.isRequired,\n    setInactiveStyle: PropTypes.func.isRequired,\n    classNameWrapper: PropTypes.string.isRequired,\n    field: ImmutablePropTypes.mapContains({\n      format: PropTypes.oneOf(['hex', 'rgb', 'hsl']),\n      default: PropTypes.string,\n      presets: ImmutablePropTypes.list,\n      alpha: PropTypes.bool,\n    }).isRequired,\n  },\n\n  getDefaultProps() {\n    return {\n      value: '',\n    };\n  },\n\n  getInitialState() {\n    return {\n      displayColorPicker: false,\n    };\n  },\n\n  handleChangeComplete(color) {\n    const { field, onChange } = this.props;\n    const alpha = !field.get('alpha', true);\n    const format = field.get('format') || DEFAULT_FORMAT;\n    let selected = color[format];\n    if (typeof selected !== 'string') {\n      const type = `${format}${alpha ? 'a' : ''}`;\n      const value = Object.values(selected).join(', ');\n\n      selected = `${type}(${value})`;\n    }\n    onChange(selected);\n  },\n\n  handleClick() {\n    const { displayColorPicker } = this.state;\n    this.setState({ displayColorPicker: !displayColorPicker });\n  },\n\n  handleClose() {\n    this.setState({ displayColorPicker: false });\n  },\n\n  render() {\n    const {\n      forID,\n      field,\n      value,\n      classNameWrapper,\n      setActiveStyle,\n      setInactiveStyle,\n    } = this.props;\n\n    const props = {\n      presetColors: undefined,\n      color: value || field.get('default') || DEFAULT_COLOR,\n      disableAlpha: !field.get('alpha', true),\n    };\n\n    if (field.has('presets')) {\n      props.presetColors = field.get('presets').toArray();\n    }\n\n    const { displayColorPicker } = this.state;\n    const styles = {\n      color: {\n        width: '30px',\n        height: '30px',\n        borderRadius: '50%',\n        background: props.color,\n        float: 'left',\n        marginRight: '10px',\n      },\n      swatch: {\n        minWidth: '120px',\n        padding: '8px',\n        background: '#ffffff',\n        display: 'inline-block',\n        cursor: 'pointer',\n        borderRadius: '25px',\n        textAlign: 'left',\n      },\n      hex: {\n        verticalAlign: 'middle',\n        lineHeight: '30px',\n      },\n      popover: {\n        position: 'absolute',\n        zIndex: '2',\n      },\n      cover: {\n        position: 'fixed',\n        top: '0px',\n        right: '0px',\n        bottom: '0px',\n        left: '0px',\n      },\n    };\n\n    return (\n      <div\n        id={forID}\n        className={classNameWrapper}\n        onFocus={setActiveStyle}\n        onBlur={setInactiveStyle}\n      >\n        <button style={styles.swatch} onClick={this.handleClick} type=\"button\">\n          <div style={styles.color} />\n          <span style={styles.hex}>\n            {props.color}\n          </span>\n        </button>\n        {displayColorPicker\n          ? (\n            <div style={styles.popover}>\n              <div tabIndex={0} role=\"button\" style={styles.cover} onClick={this.handleClose} onKeyPress={this.handleClose} />\n              <SketchPicker\n                onChangeComplete={this.handleChangeComplete}\n                {...props}\n              />\n            </div>\n          ) : null}\n      </div>\n    );\n  },\n});\n"],"names":["Control","createReactClass","getDefaultProps","value","getInitialState","displayColorPicker","handleChangeComplete","color","this","props","field","onChange","alpha","get","format","selected","type","Object","values","join","handleClick","state","setState","handleClose","render","forID","classNameWrapper","setActiveStyle","setInactiveStyle","presetColors","undefined","disableAlpha","has","toArray","styles","width","height","borderRadius","background","float","marginRight","swatch","minWidth","padding","display","cursor","textAlign","hex","verticalAlign","lineHeight","popover","position","zIndex","cover","top","right","bottom","left","h","id","className","onFocus","onBlur","style","onClick","tabIndex","role","onKeyPress","SketchPicker","onChangeComplete"],"mappings":"qpBAEe,CACbA,QCMaC,EAAiB,uBAgB9BC,iCACS,CACLC,MAAO,KAIXC,iCACS,CACLC,oBAAoB,IAIxBC,8BAAqBC,SACSC,KAAKC,MAAzBC,IAAAA,MAAOC,IAAAA,SACTC,GAASF,EAAMG,IAAI,SAAS,GAC5BC,EAASJ,EAAMG,IAAI,WAlCN,MAmCfE,EAAWR,EAAMO,MACG,iBAAbC,EAAuB,KAC1BC,YAAUF,UAASF,EAAQ,IAAM,IACjCT,EAAQc,OAAOC,OAAOH,GAAUI,KAAK,MAE3CJ,YAAcC,cAAQb,OAExBQ,EAASI,IAGXK,2BACUf,EAAuBG,KAAKa,MAA5BhB,wBACHiB,SAAS,CAAEjB,oBAAqBA,KAGvCkB,4BACOD,SAAS,CAAEjB,oBAAoB,KAGtCmB,wBAQMhB,KAAKC,MANPgB,IAAAA,MACAf,IAAAA,MACAP,IAAAA,MACAuB,IAAAA,iBACAC,IAAAA,eACAC,IAAAA,iBAGInB,EAAQ,CACZoB,kBAAcC,EACdvB,MAAOJ,GAASO,EAAMG,IAAI,YAjEV,UAkEhBkB,cAAerB,EAAMG,IAAI,SAAS,IAGhCH,EAAMsB,IAAI,aACZvB,EAAMoB,aAAenB,EAAMG,IAAI,WAAWoB,eAGpC5B,EAAuBG,KAAKa,MAA5BhB,mBACF6B,EAAS,CACb3B,MAAO,CACL4B,MAAO,OACPC,OAAQ,OACRC,aAAc,MACdC,WAAY7B,EAAMF,MAClBgC,MAAO,OACPC,YAAa,QAEfC,OAAQ,CACNC,SAAU,QACVC,QAAS,MACTL,WAAY,UACZM,QAAS,eACTC,OAAQ,UACRR,aAAc,OACdS,UAAW,QAEbC,IAAK,CACHC,cAAe,SACfC,WAAY,QAEdC,QAAS,CACPC,SAAU,WACVC,OAAQ,KAEVC,MAAO,CACLF,SAAU,QACVG,IAAK,MACLC,MAAO,MACPC,OAAQ,MACRC,KAAM,eAKRC,SACEC,GAAIlC,EACJmC,UAAWlC,EACXmC,QAASlC,EACTmC,OAAQlC,GAER8B,YAAQK,MAAO7B,EAAOO,OAAQuB,QAASxD,KAAKY,YAAaJ,KAAK,UAC5D0C,SAAKK,MAAO7B,EAAO3B,QACnBmD,UAAMK,MAAO7B,EAAOa,KACjBtC,EAAMF,QAGVF,EAEGqD,SAAKK,MAAO7B,EAAOgB,SACjBQ,SAAKO,SAAU,EAAGC,KAAK,SAASH,MAAO7B,EAAOmB,MAAOW,QAASxD,KAAKe,YAAa4C,WAAY3D,KAAKe,cACjGmC,EAACU,kBACCC,iBAAkB7D,KAAKF,sBACnBG,KAGN"}